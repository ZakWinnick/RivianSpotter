const AdminAPI={async apiRequest(t,o=null,e={}){const n=new URL(AdminConfig.API_URL,window.location.origin);Object.keys(e).forEach(t=>n.searchParams.append(t,e[t]));const i={method:t,headers:{"Content-Type":"application/json"}};"GET"!==t&&(i.headers.Authorization=`Bearer ${AdminConfig.ADMIN_TOKEN}`),o&&"GET"!==t&&(i.body=JSON.stringify(o));try{const t=await fetch(n,i),o=await t.json();if(!t.ok)throw new Error(o.error||"API request failed");return o}catch(t){throw console.error("API Error:",t),AdminUI.showNotification(`Error: ${t.message}`,"error"),t}},async loadLocations(){try{const t=new AbortController,o=setTimeout(()=>t.abort(),5e3),e=await fetch(AdminConfig.API_URL,{signal:t.signal,cache:"no-cache"});if(clearTimeout(o),!e.ok)return void await this.loadFromJSFile();const n=await e.json();AdminState.setLocations(n),AdminUI.renderLocations(),AdminUI.updateStats(),document.getElementById("connectionStatus").textContent="● API Connected",document.getElementById("connectionStatus").style.color="#4CAF50"}catch(t){console.error("Error loading from API, falling back to JS file:",t),await this.loadFromJSFile()}},async loadFromJSFile(){console.log("loadFromJSFile() called");try{const t=document.createElement("script");t.src="./js/locations.js?v=20250926b",console.log("Loading script from:",t.src),await new Promise((o,e)=>{t.onload=()=>{console.log("Script loaded, checking rivianLocations..."),"undefined"!=typeof rivianLocations&&Array.isArray(rivianLocations)?(console.log("Found rivianLocations with",rivianLocations.length,"items"),AdminState.setLocations([...rivianLocations]),o()):e(new Error("rivianLocations not found after script load"))},t.onerror=t=>{console.error("Script error:",t),e(new Error("Failed to load locations.js script"))},document.head.appendChild(t)}),console.log("About to render locations..."),AdminUI.renderLocations(),AdminUI.updateStats(),document.getElementById("connectionStatus").textContent="● File Mode",document.getElementById("connectionStatus").style.color="#fbbf24",AdminUI.showNotification("API not configured. Using file mode. Changes will download as file.","info")}catch(t){console.error("Script loading failed, trying fetch method:",t);try{const t=await fetch("./js/locations.js?v=20250926b");if(!t.ok)throw new Error("Failed to fetch JS file");const o=(await t.text()).match(/const rivianLocations = (\[[\s\S]*?\]);/);if(!o)throw new Error("Could not parse locations data");const e=JSON.parse(o[1]);AdminState.setLocations([...e]),AdminUI.renderLocations(),AdminUI.updateStats(),document.getElementById("connectionStatus").textContent="● File Mode",document.getElementById("connectionStatus").style.color="#fbbf24",AdminUI.showNotification("API not configured. Using file mode. Changes will download as file.","info")}catch(t){console.error("All loading methods failed:",t),document.getElementById("locationsList").innerHTML='\n                    <div class="empty-state">\n                        <div class="empty-icon">⚠️</div>\n                        <h3>Error loading locations</h3>\n                        <p>Please ensure you\'re running this page from a web server, not opening the file directly.</p>\n                        <p><small>For local testing: <code>python -m http.server 8000</code></small></p>\n                    </div>\n                '}}},async saveLocation(t){const o=AdminState.getEditingId();try{if(o)await this.apiRequest("PUT",t),AdminState.updateLocation(o,t);else{const o=await this.apiRequest("POST",t);AdminState.addLocation(o.location||t)}AdminState.setLocations(AdminState.getLocations()),AdminUI.showNotification("Location saved successfully","success")}catch(e){o?(AdminState.updateLocation(o,t),AdminState.trackChange(o,"modified")):(AdminState.addLocation(t),AdminState.trackChange(t.id,"added")),AdminUI.showNotification('Saved locally. Use "Save All" to download changes.',"info")}AdminUI.renderLocations(),AdminUI.updateStats()},async deleteLocation(t){try{await this.apiRequest("DELETE",null,{id:t}),AdminState.deleteLocation(t),AdminState.setLocations(AdminState.getLocations()),AdminUI.showNotification("Location deleted successfully","success")}catch(o){AdminState.deleteLocation(t),AdminState.trackChange(t,"deleted"),AdminUI.showNotification('Deleted locally. Use "Save All" to apply changes.',"info")}AdminUI.renderLocations(),AdminUI.updateStats()},async saveAllChanges(){const t=AdminState.getLocations();try{await this.apiRequest("PUT",t,{action:"bulk"}),AdminState.clearPendingChanges(),AdminState.setLocations(t),AdminUI.updateChangesBar(),AdminUI.showNotification("All changes saved to server!","success")}catch(o){const e=`const rivianLocations = ${JSON.stringify(t,null,2)};\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = rivianLocations;\n}`,n=new Blob([e],{type:"text/javascript"}),i=URL.createObjectURL(n),a=document.createElement("a");a.href=i,a.download="locations.js",a.click(),AdminState.clearPendingChanges(),AdminState.setLocations(t),AdminUI.updateChangesBar(),alert("API not configured. Downloaded locations.js file. Upload this to your server at /js/locations.js")}AdminUI.renderLocations()},exportData(){const t=AdminState.getLocations(),o=JSON.stringify(t,null,2),e=new Blob([o],{type:"application/json"}),n=URL.createObjectURL(e),i=document.createElement("a");i.href=n,i.download=`rivian-locations-backup-${(new Date).toISOString().split("T")[0]}.json`,i.click(),AdminUI.showNotification("Backup downloaded successfully","success")},async importData(){const t=document.createElement("input");t.type="file",t.accept=".json",t.onchange=async t=>{const o=t.target.files[0],e=new FileReader;e.onload=async t=>{try{const o=JSON.parse(t.target.result);if(!confirm(`Import ${o.length} locations? This will replace all current data.`))return;try{await this.apiRequest("PUT",o,{action:"bulk"}),AdminState.setLocations(o),AdminUI.showNotification(`Successfully imported ${o.length} locations!`,"success")}catch(t){AdminState.setLocations(o),AdminUI.showNotification('Imported locally. Use "Save All" to save to server.',"info")}AdminUI.renderLocations(),AdminUI.updateStats()}catch(t){AdminUI.showNotification("Error importing file","error")}},e.readAsText(o)},t.click()}};"undefined"!=typeof window&&(window.AdminAPI=AdminAPI);
//# sourceMappingURL=api.min.js.map