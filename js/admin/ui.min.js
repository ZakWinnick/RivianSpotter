const AdminUI={showNotification(e,t="info"){const n=document.querySelector(".notification");n&&n.remove();const o=document.createElement("div");o.className=`notification ${t}`,o.textContent=e,document.body.appendChild(o),setTimeout(()=>{o.style.animation="slideOut 0.3s ease",setTimeout(()=>o.remove(),300)},3e3)},renderLocations(e=""){const t=document.getElementById("locationsList"),n=AdminState.getLocations(),o=AdminState.getTypeFilter(),a=n.filter(t=>{const n=""===e||t.name.toLowerCase().includes(e.toLowerCase())||t.city.toLowerCase().includes(e.toLowerCase())||t.state.toLowerCase().includes(e.toLowerCase()),a="all"===o||t.type===o;return n&&a});0!==a.length?t.innerHTML=a.map(e=>{const t=AdminState.hasChanges(e.id),n="Service Center"===e.type?"service":e.type.toLowerCase();return`\n                <div class="location-item ${t?"modified":""}">\n                    <div class="location-info">\n                        <strong>${e.name}</strong>\n                        <span class="badge badge-${n}">${e.type}</span>\n                        <br>\n                        <small style="color: #666;">${e.address}, ${e.city}, ${e.state}</small>\n                        ${!1===e.isOpen?'<span style="color: red; margin-left: 1rem;">CLOSED</span>':""}\n                        ${t?'<span style="color: #ffa726; margin-left: 1rem;">‚Ä¢ Modified</span>':""}\n                    </div>\n                    <div class="location-actions">\n                        <button class="btn btn-secondary" onclick="AdminModal.editLocation(${e.id})">Edit</button>\n                        <button class="btn btn-danger" onclick="AdminUI.confirmDelete(${e.id})">Delete</button>\n                    </div>\n                </div>\n            `}).join(""):t.innerHTML='\n                <div class="empty-state">\n                    <div class="empty-icon">üìç</div>\n                    <h3>No locations found</h3>\n                    <p>Try adjusting your filters or add a new location</p>\n                </div>\n            '},updateStats(){const e=AdminState.getLocations();document.getElementById("totalCount").textContent=e.length,document.getElementById("spacesCount").textContent=e.filter(e=>"Space"===e.type).length,document.getElementById("serviceCentersCount").textContent=e.filter(e=>"Service Center"===e.type).length,document.getElementById("outpostsCount").textContent=e.filter(e=>"Outpost"===e.type).length,document.getElementById("statesCount").textContent=[...new Set(e.map(e=>e.state))].length},updateChangesBar(){const e=document.getElementById("changesBar"),t=document.getElementById("changesCount"),n=AdminState.getPendingChangesCount();n>0?(e.classList.add("active"),t.textContent=n):e.classList.remove("active")},filterByType(e,t){AdminState.setTypeFilter(e),document.querySelectorAll(".filter-btn").forEach(e=>{e.classList.remove("active")}),t.target.classList.add("active");const n=document.getElementById("searchInput").value;this.renderLocations(n)},async confirmDelete(e){confirm("Are you sure you want to delete this location?")&&await AdminAPI.deleteLocation(e)},discardChanges(){const e=AdminState.getPendingChangesCount();if(0!==e&&confirm(`Discard ${e} unsaved changes?`)){AdminState.discardChanges(),this.updateChangesBar();const e=document.getElementById("searchInput").value;this.renderLocations(e)}},initialize(){document.getElementById("searchInput").addEventListener("input",e=>{this.renderLocations(e.target.value)}),document.addEventListener("keydown",e=>{(e.ctrlKey||e.metaKey)&&"s"===e.key&&(e.preventDefault(),AdminAPI.saveAllChanges()),"Escape"===e.key&&AdminModal.closeModal()}),window.addEventListener("beforeunload",e=>{AdminState.getPendingChangesCount()>0&&(e.preventDefault(),e.returnValue="You have unsaved changes. Are you sure you want to leave?")})}};"undefined"!=typeof window&&(window.AdminUI=AdminUI);
//# sourceMappingURL=ui.min.js.map