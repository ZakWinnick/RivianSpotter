const AppState={map:null,markers:[],currentFilter:"all",currentStateFilter:"all",searchTerm:"",userMarker:null,isLoading:!1,searchTimeout:null,selectedStates:[],selectedServices:[],dateFrom:null,dateTo:null,distanceEnabled:!1,distanceRadius:50,userLocation:null},Utils={debounce:(e,t)=>function(...a){clearTimeout(AppState.searchTimeout),AppState.searchTimeout=setTimeout(()=>{clearTimeout(AppState.searchTimeout),e(...a)},t)},sanitizeHTML(e){if(!e)return"";const t=document.createElement("div");return t.textContent=e,t.innerHTML},isValidCoordinate:(e,t)=>"number"==typeof e&&"number"==typeof t&&e>=-90&&e<=90&&t>=-180&&t<=180,showLoading(e,t="Loading..."){e&&(AppState.isLoading=!0,e.innerHTML=`\n            <div class="loading">\n                <div class="spinner"></div>\n                <div style="margin-top: 1rem; color: #666;">${t}</div>\n            </div>\n        `)},hideLoading(){AppState.isLoading=!1},showError(e,t){t&&(t.innerHTML=`\n                <div style="padding: 2rem; text-align: center; color: #dc3545;">\n                    <div style="font-weight: 600; margin-bottom: 0.5rem;">Error</div>\n                    <div>${Utils.sanitizeHTML(e)}</div>\n                </div>\n            `),console.error("App Error:",e)}},MapManager={async initMap(){try{if("undefined"==typeof mapboxgl)throw new Error("Mapbox GL JS library not loaded");if(!rivianLocations||!Array.isArray(rivianLocations))throw new Error("Location data not available");AppState.map=new mapboxgl.Map({container:"map",style:"mapbox://styles/mapbox/light-v11",center:[-98.5795,39.8283],zoom:4}),AppState.map.on("error",e=>{console.error("Map error:",e.error),Utils.showError("Failed to load map. Please check your internet connection.",document.getElementById("locationList"))}),await new Promise((e,t)=>{AppState.map.on("load",e),AppState.map.on("error",t),setTimeout(()=>t(new Error("Map load timeout")),1e4)}),AppState.map.addControl(new mapboxgl.NavigationControl,"top-right");const e=new mapboxgl.GeolocateControl({positionOptions:{enableHighAccuracy:!0},trackUserLocation:!0,showUserHeading:!0});AppState.map.addControl(e),this.populateStateFilter(),this.addMarkers(rivianLocations),this.fitMapToLocations(rivianLocations),Utils.hideLoading()}catch(e){console.error("Failed to initialize map:",e),Utils.showError("Failed to initialize map: "+e.message,document.getElementById("locationList"))}},populateStateFilter(){try{const e=[...new Set(rivianLocations.map(e=>e.state))].sort(),t={AB:"Alberta",AZ:"Arizona",BC:"British Columbia",CA:"California",CO:"Colorado",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",KS:"Kansas",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MO:"Missouri",MT:"Montana",NV:"Nevada",NJ:"New Jersey",NY:"New York",ON:"Ontario",OR:"Oregon",QC:"Quebec",TN:"Tennessee",TX:"Texas",UT:"Utah",VA:"Virginia",WA:"Washington",WI:"Wisconsin"},a=document.getElementById("stateFilter");if(!a)throw new Error("State filter element not found");e.forEach(e=>{const o=document.createElement("option");o.value=e,o.textContent=`${t[e]||e} (${e})`,a.appendChild(o)})}catch(e){console.error("Failed to populate state filter:",e)}},addMarkers(e){try{AppState.markers.length>0&&(AppState.markers.forEach(({marker:e})=>e.remove()),AppState.markers=[]),AppState.map.getSource("locations")&&(AppState.map.getLayer("clusters")&&AppState.map.removeLayer("clusters"),AppState.map.getLayer("cluster-count")&&AppState.map.removeLayer("cluster-count"),AppState.map.getLayer("unclustered-space")&&AppState.map.removeLayer("unclustered-space"),AppState.map.getLayer("unclustered-demo")&&AppState.map.removeLayer("unclustered-demo"),AppState.map.getLayer("unclustered-outpost")&&AppState.map.removeLayer("unclustered-outpost"),AppState.map.removeSource("locations"));const t={type:"FeatureCollection",features:e.filter(e=>Utils.isValidCoordinate(e.lat,e.lng)).map(e=>({type:"Feature",geometry:{type:"Point",coordinates:[e.lng,e.lat]},properties:{id:e.id,name:e.name,type:e.type,address:e.address,city:e.city,state:e.state,phone:e.phone||"",hours:e.hours||"",openingDate:e.openingDate||"",rivianUrl:e.rivianUrl||"",services:JSON.stringify(e.services||[]),isOpen:!1!==e.isOpen}}))};AppState.map.addSource("locations",{type:"geojson",data:t,cluster:!0,clusterMaxZoom:14,clusterRadius:window.RivianSpotterConfig.performance.markerClusterRadius||50}),AppState.map.addLayer({id:"clusters",type:"circle",source:"locations",filter:["has","point_count"],paint:{"circle-color":["step",["get","point_count"],"#4CAF50",10,"#1976D2",50,"#FF6B6B"],"circle-radius":["step",["get","point_count"],20,10,30,50,40],"circle-stroke-width":2,"circle-stroke-color":"#fff"}}),AppState.map.addLayer({id:"cluster-count",type:"symbol",source:"locations",filter:["has","point_count"],layout:{"text-field":"{point_count_abbreviated}","text-font":["DIN Offc Pro Medium","Arial Unicode MS Bold"],"text-size":14},paint:{"text-color":"#ffffff"}}),AppState.map.addLayer({id:"unclustered-space",type:"circle",source:"locations",filter:["all",["!",["has","point_count"]],["==",["get","type"],"Space"]],paint:{"circle-color":"#4CAF50","circle-radius":10,"circle-stroke-width":2,"circle-stroke-color":"#fff"}}),AppState.map.addLayer({id:"unclustered-demo",type:"circle",source:"locations",filter:["all",["!",["has","point_count"]],["==",["get","type"],"Demo Center"]],paint:{"circle-color":"#1976D2","circle-radius":10,"circle-stroke-width":2,"circle-stroke-color":"#fff"}}),AppState.map.addLayer({id:"unclustered-outpost",type:"circle",source:"locations",filter:["all",["!",["has","point_count"]],["==",["get","type"],"Outpost"]],paint:{"circle-color":"#FF9800","circle-radius":10,"circle-stroke-width":2,"circle-stroke-color":"#fff"}}),AppState.map.on("click","clusters",e=>{const t=AppState.map.queryRenderedFeatures(e.point,{layers:["clusters"]}),a=t[0].properties.cluster_id;AppState.map.getSource("locations").getClusterExpansionZoom(a,(e,a)=>{e||AppState.map.easeTo({center:t[0].geometry.coordinates,zoom:a,duration:500})})});const a=["unclustered-space","unclustered-demo","unclustered-outpost"];a.forEach(e=>{AppState.map.on("click",e,e=>{const t=e.features[0].geometry.coordinates.slice(),a=e.features[0].properties;for(;Math.abs(e.lngLat.lng-t[0])>180;)t[0]+=e.lngLat.lng>t[0]?360:-360;const o={id:a.id,name:a.name,type:a.type,address:a.address,city:a.city,state:a.state,phone:a.phone,hours:a.hours,openingDate:a.openingDate,rivianUrl:a.rivianUrl,services:JSON.parse(a.services),isOpen:a.isOpen},n=this.createPopupContent(o);new mapboxgl.Popup({offset:25}).setLngLat(t).setHTML(n).addTo(AppState.map),LocationManager.highlightLocation(a.id)})}),AppState.map.on("mouseenter","clusters",()=>{AppState.map.getCanvas().style.cursor="pointer"}),AppState.map.on("mouseleave","clusters",()=>{AppState.map.getCanvas().style.cursor=""}),a.forEach(e=>{AppState.map.on("mouseenter",e,()=>{AppState.map.getCanvas().style.cursor="pointer"}),AppState.map.on("mouseleave",e,()=>{AppState.map.getCanvas().style.cursor=""})}),AppState.markers=e.map(e=>({location:e}))}catch(e){console.error("Failed to add markers:",e),Utils.showError("Failed to load map markers",document.getElementById("locationList"))}},createPopupContent(e){const t=Utils.sanitizeHTML(e.name),a=Utils.sanitizeHTML(e.address),o=Utils.sanitizeHTML(e.city),n=Utils.sanitizeHTML(e.phone),i=Utils.sanitizeHTML(e.hours),r=e.services&&Array.isArray(e.services)?`<div class="popup-services">\n                ${e.services.map(e=>`<span class="popup-service-tag">${Utils.sanitizeHTML(e)}</span>`).join("")}\n               </div>`:"",s=`https://maps.google.com/?q=${encodeURIComponent(e.address+" "+e.city)}`;let c="";"Demo Center"===e.type?c="demo-center":"Outpost"===e.type&&(c="outpost");const l="undefined"!=typeof FavoritesManager?`<button class="popup-action-btn favorite-btn"\n                    data-location-id="${e.id}"\n                    onclick="FavoritesManager.toggleFavorite(${e.id})"\n                    title="Add to favorites"\n                    aria-label="Add to favorites">\n            </button>`:"",d="undefined"!=typeof SharingManager?`<button class="popup-action-btn share-btn"\n                    data-location-id="${e.id}"\n                    data-location-name="${t}"\n                    data-location-address="${a}"\n                    onclick="SharingManager.handleShareClick(this)"\n                    title="Share this location"\n                    aria-label="Share ${t}">\n                <svg viewBox="0 0 24 24" fill="currentColor" style="width: 18px; height: 18px;">\n                    <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"/>\n                </svg>\n            </button>`:"";return`\n            <div class="popup-content">\n                <div class="popup-header">\n                    <div>\n                        <div class="popup-type ${c}">${Utils.sanitizeHTML(e.type)}</div>\n                        <div class="popup-name">${t}</div>\n                    </div>\n                    <div class="popup-actions">\n                        ${l}\n                        ${d}\n                    </div>\n                </div>\n                <div class="popup-address">\n                    ${a}<br>\n                    ${o}\n                </div>\n                ${n?`<div style="font-size: 0.85rem; color: #666;">${n}</div>`:""}\n                ${i?`<div style="font-size: 0.85rem; color: #666; margin-top: 0.25rem;">${i}</div>`:""}\n                ${e.openingDate?`<div style="font-size: 0.8rem; color: #666; margin-top: 0.5rem;"><strong>Opened:</strong> ${new Date(e.openingDate).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"})}</div>`:'<div style="font-size: 0.8rem; color: #999; margin-top: 0.5rem; font-style: italic;"><strong>Opened:</strong> Date TBD</div>'}\n                ${r}\n                ${e.rivianUrl?`<a href="${Utils.sanitizeHTML(e.rivianUrl)}" target="_blank" rel="noopener noreferrer" style="display: inline-block; margin-top: 0.5rem; color: #1976D2; text-decoration: none; font-size: 0.85rem; font-weight: 500;">View on Rivian.com →</a>`:'<div style="font-size: 0.85rem; color: #999; margin-top: 0.5rem; font-style: italic;">Rivian.com link TBD</div>'}\n                <button class="popup-button" style="margin-top: 0.75rem;" onclick="window.open('${s}', '_blank')">\n                    Get Directions\n                </button>\n            </div>\n        `},fitMapToLocations(e){try{if(!e.length)return;const t=new mapboxgl.LngLatBounds;e.forEach(e=>{Utils.isValidCoordinate(e.lat,e.lng)&&t.extend([e.lng,e.lat])}),t.isEmpty()||AppState.map.fitBounds(t,{padding:50})}catch(e){console.error("Failed to fit map bounds:",e)}}},AdvancedFilterManager={init(){this.populateStateCheckboxes(),this.populateServiceCheckboxes(),this.setupEventListeners()},populateStateCheckboxes(){try{const e=document.getElementById("stateCheckboxes");if(!e)return;const t={AB:"Alberta",AZ:"Arizona",BC:"British Columbia",CA:"California",CO:"Colorado",FL:"Florida",GA:"Georgia",HI:"Hawaii",ID:"Idaho",IL:"Illinois",KS:"Kansas",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MO:"Missouri",MT:"Montana",NV:"Nevada",NJ:"New Jersey",NY:"New York",ON:"Ontario",OR:"Oregon",QC:"Quebec",SC:"South Carolina",TN:"Tennessee",TX:"Texas",UT:"Utah",VA:"Virginia",WA:"Washington",WI:"Wisconsin"},a={};rivianLocations.forEach(e=>{a[e.state]=(a[e.state]||0)+1});const o=Object.keys(a).sort();e.innerHTML=o.map(e=>`\n                <div class="state-checkbox-item">\n                    <input type="checkbox" id="state-${e}" value="${e}" class="state-checkbox" />\n                    <label for="state-${e}" class="state-checkbox-label">\n                        <span>${t[e]||e}</span>\n                        <span class="state-count">${a[e]}</span>\n                    </label>\n                </div>\n            `).join("")}catch(e){console.error("Failed to populate state checkboxes:",e)}},populateServiceCheckboxes(){try{const e=document.getElementById("serviceCheckboxes");if(!e)return;const t=new Set;rivianLocations.forEach(e=>{e.services&&Array.isArray(e.services)&&e.services.forEach(e=>t.add(e))});const a=Array.from(t).sort();e.innerHTML=a.map(e=>`\n                <div class="service-checkbox-item">\n                    <input type="checkbox" id="service-${e.replace(/\s+/g,"-")}" value="${e}" class="service-checkbox" />\n                    <label for="service-${e.replace(/\s+/g,"-")}" class="service-checkbox-label">\n                        ${Utils.sanitizeHTML(e)}\n                    </label>\n                </div>\n            `).join("")}catch(e){console.error("Failed to populate service checkboxes:",e)}},setupEventListeners(){const e=document.getElementById("toggleAdvancedFilters"),t=document.getElementById("advancedFiltersPanel"),a=document.getElementById("toggleIcon");e&&t&&e.addEventListener("click",()=>{const e="block"===t.style.display;t.style.display=e?"none":"block",a&&a.classList.toggle("rotated",!e)}),document.querySelectorAll(".state-checkbox").forEach(e=>{e.addEventListener("change",()=>{this.updateSelectedStates(),LocationManager.filterLocations()})});const o=document.getElementById("selectAllStates"),n=document.getElementById("clearAllStates");o&&o.addEventListener("click",()=>{document.querySelectorAll(".state-checkbox").forEach(e=>e.checked=!0),this.updateSelectedStates(),LocationManager.filterLocations()}),n&&n.addEventListener("click",()=>{document.querySelectorAll(".state-checkbox").forEach(e=>e.checked=!1),this.updateSelectedStates(),LocationManager.filterLocations()}),document.querySelectorAll(".service-checkbox").forEach(e=>{e.addEventListener("change",()=>{this.updateSelectedServices(),LocationManager.filterLocations()})});const i=document.getElementById("dateFrom"),r=document.getElementById("dateTo");i&&i.addEventListener("change",e=>{AppState.dateFrom=e.target.value?new Date(e.target.value):null,LocationManager.filterLocations()}),r&&r.addEventListener("change",e=>{AppState.dateTo=e.target.value?new Date(e.target.value):null,LocationManager.filterLocations()}),document.querySelectorAll(".preset-btn").forEach(e=>{e.addEventListener("click",e=>{const t=e.target.dataset.preset;this.applyDatePreset(t),document.querySelectorAll(".preset-btn").forEach(e=>e.classList.remove("active")),e.target.classList.add("active")})});const s=document.getElementById("enableDistanceFilter"),c=(document.getElementById("distanceSliderContainer"),document.getElementById("distanceSlider")),l=document.getElementById("distanceValue");s&&s.addEventListener("click",()=>{AppState.distanceEnabled?this.disableDistanceFilter():this.enableDistanceFilter()}),c&&l&&c.addEventListener("input",e=>{const t=e.target.value;l.textContent=t,AppState.distanceRadius=parseInt(t),AppState.distanceEnabled&&LocationManager.filterLocations()});const d=document.getElementById("clearAllFilters");d&&d.addEventListener("click",()=>{this.clearAllFilters()})},updateSelectedStates(){AppState.selectedStates=Array.from(document.querySelectorAll(".state-checkbox:checked")).map(e=>e.value),this.updateFilterBadge()},updateSelectedServices(){AppState.selectedServices=Array.from(document.querySelectorAll(".service-checkbox:checked")).map(e=>e.value),this.updateFilterBadge()},updateFilterBadge(){const e=document.getElementById("activeFilterBadge");if(!e)return;let t=0;AppState.selectedStates.length>0&&t++,AppState.selectedServices.length>0&&t++,(AppState.dateFrom||AppState.dateTo)&&t++,AppState.distanceEnabled&&t++,t>0?(e.textContent=t,e.style.display="inline-block"):e.style.display="none"},applyDatePreset(e){const t=new Date,a=document.getElementById("dateFrom"),o=document.getElementById("dateTo");if("opening-soon"===e){const e=new Date(t);e.setDate(e.getDate()+1);const n=new Date(t);n.setMonth(n.getMonth()+3),a&&(a.value=e.toISOString().split("T")[0],AppState.dateFrom=e),o&&(o.value=n.toISOString().split("T")[0],AppState.dateTo=n)}else if("recently-opened"===e){const e=new Date(t);e.setMonth(e.getMonth()-6),a&&(a.value=e.toISOString().split("T")[0],AppState.dateFrom=e),o&&(o.value=t.toISOString().split("T")[0],AppState.dateTo=t)}LocationManager.filterLocations()},enableDistanceFilter(){if(!navigator.geolocation)return void alert("Geolocation is not supported by your browser.");const e=document.getElementById("enableDistanceFilter"),t=document.getElementById("distanceSliderContainer");e.textContent="Getting location...",e.disabled=!0,navigator.geolocation.getCurrentPosition(a=>{AppState.userLocation={lat:a.coords.latitude,lng:a.coords.longitude},AppState.distanceEnabled=!0,e.textContent="Location Enabled",e.classList.add("active"),e.disabled=!1,t&&(t.style.display="block"),this.updateFilterBadge(),LocationManager.filterLocations()},t=>{console.error("Geolocation error:",t),alert("Unable to get your location. Please enable location services."),e.textContent="Enable Location",e.disabled=!1})},disableDistanceFilter(){AppState.distanceEnabled=!1,AppState.userLocation=null;const e=document.getElementById("enableDistanceFilter"),t=document.getElementById("distanceSliderContainer");e&&(e.textContent="Enable Location",e.classList.remove("active")),t&&(t.style.display="none"),this.updateFilterBadge(),LocationManager.filterLocations()},clearAllFilters(){document.querySelectorAll(".state-checkbox").forEach(e=>e.checked=!1),AppState.selectedStates=[],document.querySelectorAll(".service-checkbox").forEach(e=>e.checked=!1),AppState.selectedServices=[];const e=document.getElementById("dateFrom"),t=document.getElementById("dateTo");e&&(e.value="",AppState.dateFrom=null),t&&(t.value="",AppState.dateTo=null),document.querySelectorAll(".preset-btn").forEach(e=>e.classList.remove("active")),AppState.distanceEnabled&&this.disableDistanceFilter(),AppState.currentFilter="all",AppState.currentStateFilter="all",AppState.searchTerm="";const a=document.getElementById("searchInput");a&&(a.value=""),document.querySelectorAll(".filter-btn").forEach(e=>{e.classList.toggle("active","all"===e.dataset.filter)}),this.updateFilterBadge(),LocationManager.filterLocations()}},LocationManager={filterLocations(){try{if(!rivianLocations||!Array.isArray(rivianLocations))throw new Error("Location data not available");const e=rivianLocations.filter(e=>{const t="all"===AppState.currentFilter||e.type===AppState.currentFilter,a="all"===AppState.currentStateFilter||e.state===AppState.currentStateFilter,o=AppState.searchTerm.toLowerCase().trim(),n=""===o||[e.name,e.city,e.state,e.address].some(e=>e&&e.toLowerCase().includes(o)),i=0===AppState.selectedStates.length||AppState.selectedStates.includes(e.state),r=0===AppState.selectedServices.length||e.services&&Array.isArray(e.services)&&AppState.selectedServices.some(t=>e.services.includes(t));let s=!0;if(AppState.dateFrom||AppState.dateTo)if(e.openingDate){const t=new Date(e.openingDate);AppState.dateFrom&&t<AppState.dateFrom&&(s=!1),AppState.dateTo&&t>AppState.dateTo&&(s=!1)}else s=!1;let c=!0;return AppState.distanceEnabled&&AppState.userLocation&&(c=this.calculateDistance(AppState.userLocation.lat,AppState.userLocation.lng,e.lat,e.lng)<=AppState.distanceRadius),t&&a&&n&&i&&r&&s&&c});this.renderLocationList(e),this.updateStats(e),this.updateMapMarkers(e),("all"!==AppState.currentStateFilter||AppState.selectedStates.length>0)&&e.length>0&&MapManager.fitMapToLocations(e)}catch(e){console.error("Failed to filter locations:",e),Utils.showError("Failed to filter locations",document.getElementById("locationList"))}},renderLocationList(e){const t=document.getElementById("locationList");if(t)try{if(0===e.length)return void(t.innerHTML='<div style="padding: 2rem; text-align: center; color: #666;">No locations found</div>');t.innerHTML=e.map(e=>{const t=e.services&&Array.isArray(e.services)?`<div class="location-services">\n                        ${e.services.map(e=>`<span class="service-tag">${Utils.sanitizeHTML(e)}</span>`).join("")}\n                       </div>`:"";let a="";"Demo Center"===e.type?a="demo-center":"Outpost"===e.type&&(a="outpost");const o=e.openingDate?new Date(e.openingDate).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}):"Opening date TBD";let n="";AppState.distanceEnabled&&AppState.userLocation&&(n=`<div class="location-distance">\n                        <svg viewBox="0 0 24 24" width="14" height="14" fill="#4CAF50" style="vertical-align: middle; margin-right: 4px;">\n                            <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>\n                        </svg>\n                        ${this.calculateDistance(AppState.userLocation.lat,AppState.userLocation.lng,e.lat,e.lng).toFixed(1)} miles away\n                    </div>`);const i="undefined"!=typeof FavoritesManager?`<button class="favorite-btn"\n                            data-location-id="${e.id}"\n                            onclick="event.stopPropagation(); FavoritesManager.toggleFavorite(${e.id})"\n                            title="Add to favorites"\n                            aria-label="Add to favorites">\n                    </button>`:"",r="undefined"!=typeof SharingManager?SharingManager.getShareButtonHTML(e):"";return`\n                    <div class="location-card" onclick="LocationManager.flyToLocation(${e.lng}, ${e.lat}, ${e.id})">\n                        <div class="location-card-header">\n                            <div class="location-type ${a}">${Utils.sanitizeHTML(e.type)}</div>\n                            <div class="location-card-actions">\n                                ${i}\n                                ${r}\n                            </div>\n                        </div>\n                        <div class="location-name">${Utils.sanitizeHTML(e.name)}</div>\n                        ${n}\n                        <div class="location-address">\n                            ${Utils.sanitizeHTML(e.address)}<br>\n                            ${Utils.sanitizeHTML(e.city)}\n                        </div>\n                        ${e.hours?`<div class="location-hours ${!1===e.isOpen?"location-closed":""}">${Utils.sanitizeHTML(e.hours)}</div>`:""}\n                        <div class="location-opening-date">\n                            <strong>Opened:</strong> ${o}\n                        </div>\n                        ${e.rivianUrl?`<div class="location-rivian-link">\n                            <a href="${Utils.sanitizeHTML(e.rivianUrl)}" target="_blank" rel="noopener noreferrer" onclick="event.stopPropagation();">\n                                View on Rivian.com →\n                            </a>\n                        </div>`:'<div class="location-rivian-link">\n                            <span class="rivian-link-placeholder">Rivian.com link TBD</span>\n                        </div>'}\n                        ${t}\n                    </div>\n                `}).join("")}catch(e){console.error("Failed to render location list:",e),Utils.showError("Failed to display locations",t)}},updateStats(e){try{const t=document.getElementById("locationStats");if(!t)return;const a=e.filter(e=>"Space"===e.type).length,o=e.filter(e=>"Demo Center"===e.type).length,n=e.filter(e=>"Outpost"===e.type).length;t.innerHTML=`\n                Showing ${e.length} locations • ${a} Spaces • ${o} Demo Centers • ${n} Outposts\n            `}catch(e){console.error("Failed to update stats:",e)}},updateMapMarkers(e){try{if(AppState.map.getSource("locations")){const t={type:"FeatureCollection",features:e.filter(e=>Utils.isValidCoordinate(e.lat,e.lng)).map(e=>({type:"Feature",geometry:{type:"Point",coordinates:[e.lng,e.lat]},properties:{id:e.id,name:e.name,type:e.type,address:e.address,city:e.city,state:e.state,phone:e.phone||"",hours:e.hours||"",openingDate:e.openingDate||"",rivianUrl:e.rivianUrl||"",services:JSON.stringify(e.services||[]),isOpen:!1!==e.isOpen}}))};AppState.map.getSource("locations").setData(t)}}catch(e){console.error("Failed to update map markers:",e)}},flyToLocation(e,t,a){try{if(!Utils.isValidCoordinate(t,e))throw new Error("Invalid coordinates");AppState.map.flyTo({center:[e,t],zoom:15,duration:1500}),this.highlightLocation(a),setTimeout(()=>{const o=rivianLocations.find(e=>e.id===a);if(o){const a=MapManager.createPopupContent(o);new mapboxgl.Popup({offset:25}).setLngLat([e,t]).setHTML(a).addTo(AppState.map)}},1600),window.innerWidth<=768&&UIManager.closeSidebar()}catch(e){console.error("Failed to fly to location:",e)}},highlightLocation(e){try{document.querySelectorAll(".location-card").forEach(e=>{e.classList.remove("active")});const t=document.querySelectorAll(".location-card"),a=rivianLocations.findIndex(t=>t.id===e);t[a]&&(t[a].classList.add("active"),t[a].scrollIntoView({behavior:"smooth",block:"center"}))}catch(e){console.error("Failed to highlight location:",e)}},findNearestLocation(e,t){try{if(!Utils.isValidCoordinate(e,t))throw new Error("Invalid user coordinates");let a=null,o=1/0;if(rivianLocations.forEach(n=>{if(Utils.isValidCoordinate(n.lat,n.lng)){const i=this.calculateDistance(e,t,n.lat,n.lng);i<o&&(o=i,a=n)}}),!a)throw new Error("No locations found");this.flyToLocation(a.lng,a.lat,a.id),window.innerWidth<=768&&alert(`Nearest location: ${a.name}\\nDistance: ${o.toFixed(1)} miles`)}catch(e){console.error("Failed to find nearest location:",e),alert("Unable to find nearest location. Please try again.")}},calculateDistance(e,t,a,o){const n=(a-e)*Math.PI/180,i=(o-t)*Math.PI/180,r=Math.sin(n/2)*Math.sin(n/2)+Math.cos(e*Math.PI/180)*Math.cos(a*Math.PI/180)*Math.sin(i/2)*Math.sin(i/2);return 2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r))*3958.8}},UIManager={openSidebar(){try{const e=document.getElementById("sidebar"),t=document.getElementById("mobileOverlay");e&&e.classList.add("active"),t&&t.classList.add("active")}catch(e){console.error("Failed to open sidebar:",e)}},closeSidebar(){try{const e=document.getElementById("sidebar"),t=document.getElementById("mobileOverlay");e&&e.classList.remove("active"),t&&t.classList.remove("active")}catch(e){console.error("Failed to close sidebar:",e)}},getUserLocation(){navigator.geolocation?navigator.geolocation.getCurrentPosition(e=>{try{const t=e.coords.latitude,a=e.coords.longitude;AppState.userMarker?AppState.userMarker.setLngLat([a,t]):AppState.userMarker=new mapboxgl.Marker({color:"#4CAF50"}).setLngLat([a,t]).setPopup((new mapboxgl.Popup).setHTML('<div style="padding: 0.5rem;">Your Location</div>')).addTo(AppState.map),AppState.map.flyTo({center:[a,t],zoom:10})}catch(e){console.error("Failed to process user location:",e),alert("Failed to process your location. Please try again.")}},e=>{console.error("Geolocation error:",e),alert("Unable to get your location. Please enable location services.")}):alert("Geolocation is not supported by your browser.")}};window.showStats=function(){try{const e=[...new Set(rivianLocations.map(e=>e.state))].length,t=rivianLocations.filter(e=>"Space"===e.type).length,a=rivianLocations.filter(e=>"Demo Center"===e.type).length,o=rivianLocations.filter(e=>"Outpost"===e.type).length,n=rivianLocations.filter(e=>!1!==e.isOpen).length;alert(`Rivian Spotter Statistics\\n\\nTotal Locations: ${rivianLocations.length}\\nStates/Provinces: ${e}\\nSpaces: ${t}\\nDemo Centers: ${a}\\nOutposts: ${o}\\nCurrently Open: ${n}`)}catch(e){console.error("Failed to show stats:",e),alert("Unable to load statistics.")}},window.LocationManager=LocationManager,document.addEventListener("DOMContentLoaded",function(){Utils.showLoading(document.getElementById("locationList"),"Loading locations..."),setTimeout(async()=>{try{if("undefined"==typeof mapboxgl)throw new Error("Mapbox GL JS not loaded");if(!rivianLocations)throw new Error("Location data not loaded");await MapManager.initMap(),AdvancedFilterManager.init(),LocationManager.filterLocations();const e=Utils.debounce(e=>{AppState.searchTerm=e,LocationManager.filterLocations()},300),t=document.getElementById("searchInput");t&&t.addEventListener("input",t=>{e(t.target.value)});const a=document.getElementById("stateFilter");a&&a.addEventListener("change",e=>{AppState.currentStateFilter=e.target.value,LocationManager.filterLocations()}),document.querySelectorAll(".filter-btn").forEach(e=>{e.addEventListener("click",function(){document.querySelectorAll(".filter-btn").forEach(e=>e.classList.remove("active")),this.classList.add("active"),AppState.currentFilter=this.dataset.filter,LocationManager.filterLocations()})});const o=document.getElementById("mobileFilterBtn");o&&o.addEventListener("click",UIManager.openSidebar);const n=document.getElementById("mobileListBtn");n&&n.addEventListener("click",()=>{UIManager.openSidebar(),setTimeout(()=>{const e=document.querySelector(".location-list");e&&e.scrollIntoView({behavior:"smooth"})},300)});const i=document.getElementById("mobileNearMeBtn");i&&i.addEventListener("click",()=>{navigator.geolocation.getCurrentPosition(e=>{LocationManager.findNearestLocation(e.coords.latitude,e.coords.longitude)},e=>{console.error("Geolocation error:",e),alert("Unable to get your location. Please enable location services.")})});const r=document.getElementById("closeSidebar");r&&r.addEventListener("click",UIManager.closeSidebar);const s=document.getElementById("mobileOverlay");s&&s.addEventListener("click",UIManager.closeSidebar);const c=document.getElementById("locationBtn");c&&c.addEventListener("click",UIManager.getUserLocation)}catch(e){console.error("Failed to initialize app:",e),Utils.showError("Failed to initialize application: "+e.message,document.getElementById("locationList"))}},100)});
//# sourceMappingURL=app.min.js.map