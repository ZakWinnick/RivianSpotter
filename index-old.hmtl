<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rivian Spotter - Find Rivian Spaces & Outposts</title>
    
    <!-- Mapbox CSS -->
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css' rel='stylesheet' />
    
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            color: #1a1a1a;
        }
        
        #root {
            height: 100vh;
            width: 100vw;
        }
        
        .container {
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        
        .header {
            background: white;
            border-bottom: 1px solid #e5e5e5;
            padding: 1rem 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            z-index: 1000;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .logo {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1a1a1a;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .logo-dot {
            width: 12px;
            height: 12px;
            background: #4CAF50;
            border-radius: 50%;
        }
        
        .nav-links {
            display: flex;
            gap: 2rem;
            align-items: center;
        }
        
        .nav-link {
            color: #666;
            text-decoration: none;
            font-size: 0.95rem;
            font-weight: 500;
            transition: color 0.2s;
        }
        
        .nav-link:hover {
            color: #1a1a1a;
        }
        
        .map-container {
            flex: 1;
            position: relative;
        }
        
        #map {
            width: 100%;
            height: 100%;
        }
        
        .sidebar {
            position: absolute;
            top: 1rem;
            left: 1rem;
            width: 380px;
            max-width: calc(100% - 2rem);
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 100;
            overflow: hidden;
        }
        
        .search-box {
            padding: 1rem;
            border-bottom: 1px solid #e5e5e5;
        }
        
        .search-input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 2px solid #e5e5e5;
            border-radius: 8px;
            font-size: 0.95rem;
            transition: border-color 0.2s;
        }
        
        .search-input:focus {
            outline: none;
            border-color: #4CAF50;
        }
        
        .location-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .location-card {
            padding: 1rem;
            border-bottom: 1px solid #e5e5e5;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .location-card:hover {
            background: #f9f9f9;
        }
        
        .location-card.active {
            background: #f0f7ff;
        }
        
        .location-type {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background: #4CAF50;
            color: white;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .location-type.outpost {
            background: #2196F3;
        }
        
        .location-name {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }
        
        .location-address {
            color: #666;
            font-size: 0.9rem;
            line-height: 1.4;
        }
        
        .location-hours {
            color: #4CAF50;
            font-size: 0.85rem;
            margin-top: 0.5rem;
            font-weight: 500;
        }
        
        .marker {
            background-color: #4CAF50;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            cursor: pointer;
            border: 3px solid white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: transform 0.2s;
        }
        
        .marker:hover {
            transform: scale(1.1);
        }
        
        .marker.outpost {
            background-color: #2196F3;
        }
        
        .marker-icon {
            width: 16px;
            height: 16px;
            fill: white;
        }
        
        .mapboxgl-popup-content {
            padding: 0;
            border-radius: 8px;
            min-width: 250px;
        }
        
        .popup-content {
            padding: 1rem;
        }
        
        .popup-type {
            display: inline-block;
            padding: 0.2rem 0.4rem;
            background: #4CAF50;
            color: white;
            border-radius: 4px;
            font-size: 0.7rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .popup-name {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .popup-address {
            color: #666;
            font-size: 0.85rem;
            line-height: 1.3;
            margin-bottom: 0.75rem;
        }
        
        .popup-button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.85rem;
            font-weight: 500;
            cursor: pointer;
            width: 100%;
            transition: background 0.2s;
        }
        
        .popup-button:hover {
            background: #45a049;
        }
        
        @media (max-width: 768px) {
            .sidebar {
                width: calc(100% - 2rem);
            }
            
            .nav-links {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div id="root"></div>
    
    <!-- React and Babel -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Mapbox GL JS -->
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js'></script>
    
    <script type="text/babel">
        const { useState, useEffect, useRef } = React;
        
        // Mock data - you'll replace this with real data later
        const locations = [
            {
                id: 1,
                name: "Laguna Beach - South Coast Theater",
                type: "Space",
                lat: 33.5427,
                lng: -117.7854,
                address: "162 South Coast Highway",
                city: "Laguna Beach, CA 92651",
                hours: "Mon-Sat: 10am-7pm, Sun: 11am-6pm",
                phone: "(949) 715-0130",
                services: ["Test Drives", "Vehicle Tours", "Merchandise"]
            },
            {
                id: 2,
                name: "Irvine - Service Center",
                type: "Outpost",
                lat: 33.6846,
                lng: -117.8265,
                address: "2233 Alton Parkway",
                city: "Irvine, CA 92606",
                hours: "Mon-Fri: 8am-5pm",
                phone: "(949) 555-0123",
                services: ["Service", "Repairs", "Parts"]
            },
            {
                id: 3,
                name: "El Segundo - Space",
                type: "Space",
                lat: 33.9192,
                lng: -118.4165,
                address: "2101 E Grand Ave",
                city: "El Segundo, CA 90245",
                hours: "Mon-Sat: 10am-7pm, Sun: 11am-6pm",
                phone: "(310) 555-0456",
                services: ["Test Drives", "Vehicle Tours", "Merchandise", "Delivery"]
            }
        ];
        
        function App() {
            const mapContainer = useRef(null);
            const map = useRef(null);
            const [selectedLocation, setSelectedLocation] = useState(null);
            const [searchTerm, setSearchTerm] = useState('');
            const markers = useRef([]);
            
            // Initialize map
            useEffect(() => {
                if (map.current) return; // Initialize map only once
                
                // Mapbox token for Rivian Spotter
                mapboxgl.accessToken = 'pk.eyJ1IjoiemFrd2lubmljayIsImEiOiJjbWYxYzV5bmQxZGwzMmxxNHBieHp3NDI2In0.YAzo3vcGSqaNxZyz4GA7xg';
                
                map.current = new mapboxgl.Map({
                    container: mapContainer.current,
                    style: 'mapbox://styles/mapbox/light-v11',
                    center: [-117.7854, 33.5427], // Center on Laguna Beach location
                    zoom: 10
                });
                
                map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');
                
                // Add markers for each location
                locations.forEach(location => {
                    // Create custom marker element
                    const el = document.createElement('div');
                    el.className = `marker ${location.type === 'Outpost' ? 'outpost' : ''}`;
                    el.innerHTML = `
                        <svg class="marker-icon" viewBox="0 0 24 24">
                            ${location.type === 'Space' 
                                ? '<path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>'
                                : '<path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>'
                            }
                        </svg>
                    `;
                    
                    // Create popup
                    const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(`
                        <div class="popup-content">
                            <div class="popup-type">${location.type}</div>
                            <div class="popup-name">${location.name}</div>
                            <div class="popup-address">
                                ${location.address}<br>
                                ${location.city}
                            </div>
                            <button class="popup-button" onclick="window.open('https://maps.google.com/?q=${encodeURIComponent(location.address + ' ' + location.city)}', '_blank')">
                                Get Directions
                            </button>
                        </div>
                    `);
                    
                    // Add marker to map
                    const marker = new mapboxgl.Marker(el)
                        .setLngLat([location.lng, location.lat])
                        .setPopup(popup)
                        .addTo(map.current);
                    
                    // Add click handler
                    el.addEventListener('click', () => {
                        setSelectedLocation(location);
                        map.current.flyTo({
                            center: [location.lng, location.lat],
                            zoom: 13,
                            duration: 1000
                        });
                    });
                    
                    markers.current.push(marker);
                });
            }, []);
            
            // Filter locations based on search
            const filteredLocations = locations.filter(location =>
                location.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                location.city.toLowerCase().includes(searchTerm.toLowerCase()) ||
                location.address.toLowerCase().includes(searchTerm.toLowerCase())
            );
            
            const handleLocationClick = (location) => {
                setSelectedLocation(location);
                map.current.flyTo({
                    center: [location.lng, location.lat],
                    zoom: 13,
                    duration: 1000
                });
                
                // Open the popup for this marker
                const markerIndex = locations.findIndex(l => l.id === location.id);
                if (markers.current[markerIndex]) {
                    markers.current[markerIndex].togglePopup();
                }
            };
            
            return (
                <div className="container">
                    <header className="header">
                        <div className="logo">
                            <div className="logo-dot"></div>
                            Rivian Spotter
                        </div>
                        <nav className="nav-links">
                            <a href="#" className="nav-link">Map</a>
                            <a href="#" className="nav-link">Spaces</a>
                            <a href="#" className="nav-link">Outposts</a>
                            <a href="#" className="nav-link">About</a>
                        </nav>
                    </header>
                    
                    <div className="map-container">
                        <div className="sidebar">
                            <div className="search-box">
                                <input
                                    type="text"
                                    className="search-input"
                                    placeholder="Search locations..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                />
                            </div>
                            <div className="location-list">
                                {filteredLocations.map(location => (
                                    <div
                                        key={location.id}
                                        className={`location-card ${selectedLocation?.id === location.id ? 'active' : ''}`}
                                        onClick={() => handleLocationClick(location)}
                                    >
                                        <div className={`location-type ${location.type === 'Outpost' ? 'outpost' : ''}`}>
                                            {location.type}
                                        </div>
                                        <div className="location-name">{location.name}</div>
                                        <div className="location-address">
                                            {location.address}<br />
                                            {location.city}
                                        </div>
                                        <div className="location-hours">{location.hours}</div>
                                    </div>
                                ))}
                            </div>
                        </div>
                        <div ref={mapContainer} id="map" />
                    </div>
                </div>
            );
        }
        
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>
